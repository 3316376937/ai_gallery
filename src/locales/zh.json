{
    "home": "首页",
    "profile": "小盛律师",
    "games": "游戏",
    "algorithms": "算法",
    "others": "其他",
    "try": "玩一玩",
    "gomoku_title": "五子棋",
    "gomoku_description": "五子棋是一种双人对弈的纯策略型棋类游戏，这里支持完整的游戏规则。",
    "black_turn": "黑方回合",
    "black_win": "黑方获胜",
    "white_turn": "白方回合",
    "white_win": "白方获胜",
    "start_game": "开始游戏",
    "game_over": "游戏结束!",
    "congratulations": "恭喜，你成功了!",
    "restart_game": "重新开始",
    "go_back": "返回",

    "chess_title": "中国象棋",
    "chess_description": "中国象棋游戏，简约的棋盘的基本布局，完整的游戏规则，黑红玩家轮换，将军，最后胜局判断等。还支持悔棋功能哦",
    "current_player": "{{player}} 回合",
    "player_in_check": "{{player}} 被将军",
    "checkmate_announcement": "将死！{{winner}}获胜！",
    "stalemate_announcement": "和棋！游戏平局",
    "red": "红方",
    "black": "黑方",
    "move_steps": "共计 {{steps}} 步",
    "undo_move": "悔棋",
    "tetris_title": "俄罗斯方块",
    "gain_score": "得分 {{score}}",
    "tetris_description": "经典的俄罗斯方块游戏，包括方块的旋转，移动，加速等。挑战你的空间感知能力和快速思考！",
    "bfs_path_title": "广度优先寻路",
    "bfs_path_description": "可视化展示广度优先寻路算法，给定一个网络，可以设置障碍物，起点，终点，然后展示寻路过程",
    "heap_title": "堆算法",
    "heap_description": "可视化展示堆操作，包括插入、删除等操作。动态显示每次操作的具体步骤，帮助理解堆操作的原理。",
    "insert_node": "插入节点",
    "delete_root": "删除最大值",
    "deleted_node": "被删节点",
    "input_number": "输入一个数字",
    "astar_title": "A* 寻路",
    "astar_description": "可视化展示 A* 寻路算法，给定一个网络，可以设置障碍物，起点，终点，然后展示寻路过程",
    "set_obstacles": "设置障碍物",
    "set_start_point": "设置起点",
    "set_end_point": "设置终点",
    "grid_width": "网格宽度",
    "grid_height": "网格高度",
    "search_speed": "搜索速度",
    "find_path": "查找路径",
    "reset_grid": "重置网格",
    "no_path_found": "找不到路径。",

    "dijkstra_title": "Dijkstra 寻路",
    "dijkstra_description": "可视化展示 Dijkstra 寻路算法，给定一个网络，可以设置不同节点之间的权重，选择起点后，就可以计算到其他节点的最短路径",
    "submit": "提交",
    "weight": "权重",
    "weight_matrix": "权重矩阵",
    "select_start": "选择起点",
    "search_process": "搜索过程",
    "round": "轮次",
    "bar_chart_race_title": "动态条形图(开发中)",
    "bar_chart_race_description": "动态条形图通常用来展示数据随时间变化的情况，通过本页面可以自定义数据和时间，生成动态条形图，并且支持大量的自定义设置。",

    "2048_title": "2048 游戏",
    "2048_description": "2048 游戏，通过滑动方块，使相同数字的方块相加，最终得到 2048 数字即成功。",
    "reset": "重置",
    "one_step_win": "预设胜利",
    "one_step_fail": "预设失败",
    "select_language": "选择语言",
    "snake_title": "贪吃蛇",
    "snake_description": "经典的贪吃蛇游戏，通过键盘控制蛇的移动，吃到食物，蛇的身体会变长，同时速度会加快，直到撞到墙壁或者自己的身体。",

    "ratelimit_title": "窗口限流",
    "ratelimit_description": "限流是一种控制网络发送或接收的流量速率的策略，固定窗口限频和滑动窗口限频是最常见的限流算法，本页面展示了这两种算法的特点和对比。",
    "rate_limit_compare": "滑动窗口 VS 固定窗口限流对比",
    "rate_limit_qps": "1 秒请求数限制",
    "rate_limit_random": "生成随机请求",
    "total_request": "总请求数",
    "sliding_window_success": "滑动窗口成功",
    "sliding_window_fail": "滑动窗口失败",
    "fixed_window_success": "固定窗口成功",
    "fixed_window_fail": "固定窗口失败",

    "tokenbucket_title": "令牌桶",
    "tokenbucket_description": "令牌桶是一种限流算法，可以用来控制发送或接收的流量速率。可以设置桶的容量，令牌产生速度，以及请求速度，然后会绘制请求成功或者失败的曲线。",
    "token_bucket_chart": "令牌桶算法模拟",
    "time": "时间",
    "success_request": "成功请求数",
    "fail_request": "失败请求数",
    "remain_tokens": "剩余令牌数",
    "bucket_capacity": "桶容量",
    "token_rate": "每秒令牌产生数",
    "request_rate": "每秒请求数",
    "start": "开始",
    "pause": "暂停",
    "count": "计数",

    "trie_title": "前缀树",
    "trie_description": "前缀树是一种树形数据结构，用于存储关联数组，其中的键通常是字符串。本页面展示了前缀树的基本操作，包括插入、删除、搜索等。",
    "insert": "插入",
    "delete": "删除",
    "search": "查找",
    "random_initialize": "随机初始化",
    "enter_word": "输入单词",
    "words_in_trie": "前缀树中的单词",
    "find_word_in_trie": "{{word}} 在前缀树",
    "no_word_in_trie": "{{word}} 不在前缀树",

    "linkedlist_title": "单向链表",
    "linkedlist_description": "单向链表由一系列节点组成，每个节点包含数据和指向下一个节点的指针。本页面展示了单向链表的基本操作，包括插入、删除、搜索等。",
    "node_not_found": "节点未找到",
    "node_found_index": "在下标 {{index}} 找到节点",
    "enter_node_value": "输入节点值",
    "insert_after_pos": "在下标 {{index}} 后面插",
    "insert_at_end": "在链表尾部插",
    "click_node_to_remove": "选中节点删除",
    "remove_node_at": "删除下标 {{index}} 节点",

    "stack_title": "栈",
    "stack_description": "栈是一种后进先出（LIFO）队列，本页面可视化展示了栈的基本操作，包括入栈、出栈、调整栈高度等。",
    "nextElement": "下一个元素",
    "stackTop": "栈顶",
    "stackBottom": "栈底",
    "push": "入栈",
    "pop": "出栈",
    "stackHeight": "栈高度",
    "pushedElements": "入栈元素(按入栈顺序)",
    "poppedElements": "出栈元素(按出栈顺序)",
    "stackFull": "栈已满，无法入栈",
    "stackEmpty": "栈为空，无法出栈",
    "pushed": "入栈: {{item}}",
    "popped": "出栈: {{item}}",
    "stackReset": "栈已重置",
    "stackHeightAdjusted": "栈高度已调整为 {{height}}",
    "invalidNewHeight": "新高度小于当前栈大小，无法调整"
}