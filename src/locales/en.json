{
    "home": "Home",
    "profile": "Profile",
    "games": "Games",
    "algorithms": "Algorithms",
    "others": "Others",
    "try": "Try",
    "gomoku_title": "Gomoku",
    "gomoku_description": "Gomoku is a two-player pure strategy board game. This version supports the complete game rules.",
    "black_turn": "Black's Turn",
    "black_win": "Black Wins",
    "white_turn": "White's Turn",
    "white_win": "White Wins",
    "start_game": "Start Game",
    "restart_game": "Restart Game",
    "game_over": "Game Over!",
    "congratulations": "Congratulations!",
    "go_back": "Go Back",
    "chess_title": "Chinese Chess",
    "chess_description": "Chinese Chess game with a minimalist board layout, complete rules, alternating turns between black and red players, checks, and endgame determination. Undo feature is also supported.",
    "undo_move": "Undo Move",
    "current_player": "Current Player: {{player}}",
    "player_in_check": "{{player}} is in check!",
    "checkmate_announcement": "Checkmate! {{winner}} wins!",
    "stalemate_announcement": "Stalemate!",
    "red": "Red",
    "black": "Black",
    "move_steps": "{{steps}} Steps",
    "tetris_title": "Tetris",
    "tetris_description": "Classic Tetris game, including block rotation, movement, and acceleration. Challenge your spatial awareness and quick thinking!",
    "gain_score": "Scores: {{score}}",
    "bfs_path_title": "BFS Pathfinding",
    "bfs_path_description": "Visualization of the Breadth-First Search pathfinding algorithm. Set obstacles, start and end points in a network, and watch the pathfinding process.",
    "heap_title": "Heap",
    "heap_description": "Visualization of heap operations, including insertions and deletions. Dynamically displays each step of the operation to help understand the principles of heap operations.",
    "insert_node": "Insert Node",
    "delete_root": "Delete Root",
    "input_number": "Input a number",
    "deleted_node": "Deleted Node",
    "astar_title": "A* Pathfinding",
    "astar_description": "Visualization of the A* pathfinding algorithm. Set obstacles, start and end points in a network, and watch the pathfinding process.",
    "set_obstacles": "Set Obstacles",
    "set_start_point": "Set Start Point",
    "set_end_point": "Set End Point",
    "grid_width": "Grid Width",
    "grid_height": "Grid Height",
    "search_speed": "Find Speed",
    "find_path": "Find Path",
    "reset_grid": "Reset Grid",
    "no_path_found": "No path found",

    "dijkstra_title": "Dijkstra Shortest Path",
    "dijkstra_description": "Given a network, you can set the weights between different nodes, and after selecting the starting point, you can calculate the shortest path to other nodes.",
    "submit": "Submit",
    "weight": "Weight",
    "weight_matrix": "Weight Matrix",
    "select_start": "Select Start",
    "search_process": "Search Process",
    "round": "Round",
    "bar_chart_race_title": "BarChartRace(Developing)",
    "bar_chart_race_description": "Dynamic bar charts are usually used to show how data changes over time. This page allows you to customize data and time, generate dynamic bar charts, and supports a large number of custom settings.",

    "2048_title": "Game 2048",
    "2048_description": "2048 game, by sliding the blocks, add up the blocks with the same number, and finally get the number 2048 to succeed. ",
    "reset": "Reset",
    "one_step_win": "One Step Win",
    "one_step_fail": "One Step Fail",

    "snake_title": "Snake Game",
    "snake_description": "Classic Snake game, control the snake to eat food, and grow longer. Avoid hitting the wall or the snake's body.",
    "ratelimit_title": "Rate Limit",
    "ratelimit_description": "Rate limiting is a strategy to control the rate of traffic sent or received by a network. Fixed window rate limiting and sliding window rate limiting are the most common rate limiting algorithms. This page shows the characteristics and comparison of these two algorithms.",
    "rate_limit_compare": "Sliding Window VS Fixed Window Rate Limiting Comparison",
    "rate_limit_qps": "Request Limit per Second",
    "rate_limit_random": "Generate random data",
    "total_request": "Total Requests",
    "sliding_window_success": "Sliding Success",
    "sliding_window_fail": "Sliding Fail",
    "fixed_window_success": "Fixed Success",
    "fixed_window_fail": "Fixed Fail",

    "tokenbucket_title": "Token Bucket",
    "tokenbucket_description": "Token bucket is a rate limiting algorithm that can be used to control the rate of traffic. You can set the bucket capacity, token generation rate, and request rate, and then draw the curve of successful or failed requests.",
    "token_bucket_chart": "Token Bucket Algorithm Visualization",
    "select_language": "Select Language",
    "success_request": "Success Request",
    "fail_request": "Fail Request",
    "remain_tokens": "Remain Tokens",
    "bucket_capacity": "Bucket Capacity",
    "token_rate": "Token Rate",
    "request_rate": "Request Rate",
    "start": "Start",
    "pause": "Pause",
    "time": "Time",
    "count": "Count",

    "trie_title": "Trie",
    "trie_description": "Trie is a tree-like data structure that is used to store a dynamic set of strings. This page shows the process of insert, delete and search for strings in the trie.",
    "insert": "Insert",
    "delete": "Delete",
    "search": "Search",
    "random_initialize": "Random Initialize",
    "enter_word": "Enter a word",
    "words_in_trie": "Words in Trie",
    "find_word_in_trie": "{{word}} is in trie",
    "no_word_in_trie": "{{word}} is not in trie"
}